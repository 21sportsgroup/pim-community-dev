// Get form name
var formName = 'pim_product_attribute_form';
$('#'+ formName +'_attributeType').on('change', updateFieldsFromAttributeType);

// Enable/disable fields according to attribute type value
function updateFieldsFromAttributeType() {
    // enable all fields
    enableField('unique');

    // disable field and check
    switch ($('#pim_product_attribute_form_attributeType').val()) {
        case '{{ constant('Oro\\Bundle\\FlexibleEntityBundle\\Model\\AbstractAttributeType::TYPE_TEXTAREA_CLASS') }}':
        case '{{ constant('Oro\\Bundle\\FlexibleEntityBundle\\Model\\AbstractAttributeType::TYPE_MONEY_CLASS') }}':
        case '{{ constant('Oro\\Bundle\\FlexibleEntityBundle\\Model\\AbstractAttributeType::TYPE_OPT_MULTI_SELECT_CLASS') }}':
        case '{{ constant('Oro\\Bundle\\FlexibleEntityBundle\\Model\\AbstractAttributeType::TYPE_OPT_SINGLE_SELECT_CLASS') }}':
        case '{{ constant('Oro\\Bundle\\FlexibleEntityBundle\\Model\\AbstractAttributeType::TYPE_FILE_CLASS') }}':
        case '{{ constant('Oro\\Bundle\\FlexibleEntityBundle\\Model\\AbstractAttributeType::TYPE_IMAGE_CLASS') }}':
        case '{{ constant('Oro\\Bundle\\FlexibleEntityBundle\\Model\\AbstractAttributeType::TYPE_METRIC_CLASS') }}':
        case '{{ constant('Oro\\Bundle\\FlexibleEntityBundle\\Model\\AbstractAttributeType::TYPE_BOOLEAN_CLASS') }}':
            disableField('unique');
            break;
        default:
            updateFieldsFromUnique();
    }
}

// Enable a field from its name (just enable don't change check state)
function enableField(fieldName) {
    $('#'+ formName +'_'+ fieldName).removeAttr('disabled');
}

// Disable a field from its name (uncheck and disable)
function disableField(fieldName) {
    $('#'+ formName +'_'+ fieldName).attr('checked', false);
    $('#'+ formName +'_'+ fieldName).attr('disabled', true);
}

// update fields when editing
updateFieldsFromAttributeType();

/****************************************************/

$('#'+ formName +'_unique').on('change', updateFieldsFromUnique);
// Enable/disable fields according to unique type value
function updateFieldsFromUnique() {
	console.info('update fields from unique');
	if ($('#'+ formName +'_unique').is(':checked')) {
		// update scope
		$('#'+ formName +'_scopable option').filter(function() {
		    console.log($(this).val());
            return $(this).val() == 0;
		}).attr('selected', 'selected');

		disableField('translatable');
		disableField('scopable');
	} else {
		// enable two fields (channel + translatable)
		enableField('translatable');
		enableField('scopable');
	}
}

$(function() {
    $('#tabs').tabs().delegate("a", "click", function() {
        $(this).parent().parent().find('li').each(function() {
            $(this).removeClass('active');
        });
        $(this).parent().addClass('active');
    });

    $('select').select2({ allowClear: true });

    $('input.multiselect').select2({ tags: $(this).val() });

    $('select[id*=validationRule]').change(function() {
        if ($(this).val() == 'regexp') {
            $('input[id*=validationRegexp]').parent().parent().show();
        } else {
            $('input[id*=validationRegexp]').parent().parent().hide();
        }
    });
    $('select[id*=validationRule]').trigger('change');

    if ($('select[id*=availableLanguages]').val()) {
        $('select[id*=availableLanguages]').parent().parent().show();
        $('#limitLanguages-switch').bootstrapSwitch('setState', true);
    }

    $('#limitLanguages-switch').on('switch-change', function (e, data) {
        if (data.value) {
            $(this).parent().parent().next().show();
        } else {
            $('select[id*=availableLanguages]').select2('val', '');
            $(this).parent().parent().next().hide();
        }
    });

    $('#pim_product_attribute_form_metricType').select2({ data: OroApp.measures.getMetricTypes() });
    $('#pim_product_attribute_form_metricType').change(function() {
        $('#pim_product_attribute_form_defaultMetricUnit').select2({
            data: OroApp.measures.getMetricUnits($(this).select2('val'))
        });
    });
    $('#pim_product_attribute_form_metricType').trigger('change');

    $('.picker-datetime').datetimepicker();
    $('.picker-date').datetimepicker({ pickTime: false });
    $('.picker-time').datetimepicker({ pickDate: false });

    $('.picker-date, .picker-datetime').on('changeDate', function(e) {
        var val = e.date ? e.date.toISOString() : '';
        $(this).parent().children('input').val(val);
    });

    $('.picker-time').on('changeDate', function(e) {
        var val = '';
        if (e.localDate) {
            var h = e.localDate.getHours();
            var m = e.localDate.getMinutes();
            h = (h > 9) ? h : '0' + h;
            m = (m > 9) ? m : '0' + m;
            val = h + ':' + m;
        }
        $(this).parent().children('input').val(val);
    });

    $('.accordion').on('show hide', function (n) {
        $(n.target).siblings('.accordion-heading').find('.accordion-toggle i').toggleClass('icon-chevron-up icon-chevron-down');
    });

});
