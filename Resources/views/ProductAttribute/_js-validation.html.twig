// Get form name
var formName = 'pim_product_attribute_form';
$('#'+ formName +'_attributeType').on('change', updateFieldsFromAttributeType);

// Enable/disable fields according to attribute type value
function updateFieldsFromAttributeType() {
    // enable all fields
    enableField('unique');

    // disable field and check
    switch ($('#pim_product_attribute_form_attributeType').val()) {
        case '{{ constant('Oro\\Bundle\\FlexibleEntityBundle\\Model\\AbstractAttributeType::TYPE_TEXTAREA_CLASS') }}':
        case '{{ constant('Oro\\Bundle\\FlexibleEntityBundle\\Model\\AbstractAttributeType::TYPE_MONEY_CLASS') }}':
        case '{{ constant('Oro\\Bundle\\FlexibleEntityBundle\\Model\\AbstractAttributeType::TYPE_OPT_MULTI_SELECT_CLASS') }}':
        case '{{ constant('Oro\\Bundle\\FlexibleEntityBundle\\Model\\AbstractAttributeType::TYPE_OPT_SINGLE_SELECT_CLASS') }}':
        case '{{ constant('Oro\\Bundle\\FlexibleEntityBundle\\Model\\AbstractAttributeType::TYPE_FILE_CLASS') }}':
        case '{{ constant('Oro\\Bundle\\FlexibleEntityBundle\\Model\\AbstractAttributeType::TYPE_IMAGE_CLASS') }}':
        case '{{ constant('Oro\\Bundle\\FlexibleEntityBundle\\Model\\AbstractAttributeType::TYPE_METRIC_CLASS') }}':
        case '{{ constant('Oro\\Bundle\\FlexibleEntityBundle\\Model\\AbstractAttributeType::TYPE_BOOLEAN_CLASS') }}':
            disableField('unique');
            break;
        default:
            updateFieldsFromUnique();
    }
}

// Enable a field from its name (just enable don't change check state)
function enableField(fieldName) {
    $('#'+ formName +'_'+ fieldName).removeAttr('disabled');
}

// Disable a field from its name (uncheck and disable)
function disableField(fieldName) {
    $('#'+ formName +'_'+ fieldName).attr('checked', false);
    $('#'+ formName +'_'+ fieldName).attr('disabled', true);
}

// update fields when editing
updateFieldsFromAttributeType();

/****************************************************/

$('#'+ formName +'_unique').on('change', updateFieldsFromUnique);
// Enable/disable fields according to unique type value
function updateFieldsFromUnique() {
	console.info('update fields from unique');
	if ($('#'+ formName +'_unique').is(':checked')) {
		// update scope
		$('#'+ formName +'_scopable option').filter(function() {
		    console.log($(this).val());
            return $(this).val() == 0;
		}).attr('selected', 'selected');

		disableField('translatable');
		disableField('scopable');
	} else {
		// enable two fields (channel + translatable)
		enableField('translatable');
		enableField('scopable');
	}
}

$(function() {
    $('#tabs').tabs().delegate("a", "click", function() {
        $(this).parent().parent().find('li').each(function() {
            $(this).removeClass('active');
        });
        $(this).parent().addClass('active');
    });

    $('select').select2({ allowClear: true });

    $('input.multiselect').select2({ tags: $(this).val() });

    if ($('select[id*=availableLanguages]').val()) {
        $('select[id*=availableLanguages]').parent().parent().show();
        $('input[name=limitLanguages]').attr('checked', true);
    }

    $('input[name=limitLanguages]').change(function() {
        if($(this).attr('checked')) {
            $(this).parent().parent().next().show();
        } else {
            $('select[id*=availableLanguages]').val('').trigger("liszt:updated");
            $(this).parent().parent().next().hide();
        }
    });
});
