{% extends 'PimUIBundle::layout.html.twig' %}

{% block title %}{{ parent() }} {% trans %}pim.catalog.set.title.edit{% endtrans %}{% endblock %}

{% block content_menu_more %}
    {{ parent() }}
    <li>
        <a href="{{ path('pim_catalog_productset_index') }}" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary" role="button">
            <span class="ui-button-icon-primary ui-icon ui-icon-fugue-ui-button-navigation-back"></span>
            <span class="ui-button-text">{% trans %}bap.navigation.back-list{% endtrans %}</span>
        </a>
    </li>
    <li>
        <a href="#" onclick="$('#edit-form-submit').click(); return false;" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary" role="button">
            <span class="ui-button-icon-primary ui-icon ui-icon-fugue-disk"></span>
            <span class="ui-button-text">{% trans %}bap.button.save{% endtrans %}</span>
        </a>
    </li>
{% endblock %}

{% block content %}

    <h1>{{ "pim.catalog.set.title.edit" | trans }}</h1>

    {% form_theme form 'BapUIBundle:Form:fields.html.twig' %}
    <form action="{{ path('pim_catalog_productset_update', { 'id': entity.id }) }}" method="post" {{ form_enctype(form) }}>

        {{ form_errors(form) }}

        <div class="form-panel ui-corner-all">
            <h2>{% trans %}pim.catalog.set.fieldset.general{% endtrans %}</h2>
            {{ form_row(form.id) }}
            {{ form_row(form.code) }}
            {{ form_row(form.title) }}
        </div>

        <!-- notice -->
        <div class="form-panel ui-corner-all notice">
            <em>{% trans %}pim.catalog.set.message.demo-view{% endtrans %}</em>
        </div>

        <!-- set attributes -->
        <div class="fluid-column-wrapper">
            <div class="ui-corner-all form-panel type-group-fields">

                <a id="add_tab" href="#" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary" role="button" />
                    <span class="ui-button-icon-primary ui-icon ui-icon-fugue-plus-button"></span>
                    <span class="ui-button-text">{% trans %}pim.catalog.set.text.add-group{% endtrans %}</span>
                </a>
                <h2>{% trans %}pim.catalog.set.fieldset.group-attribute{% endtrans %}</h2>


                <div id="tabs">
                    <!-- one tab by group -->
                    <ul>
                        {% for group in form.groups %}
                        <li class="tab">
                            <span class="ui-icon ui-icon-close">{% trans %}pim.catalog.set.text.delete-group{% endtrans %}</span>
                            <a href="#tabs-{{ loop.index }}">{{ group.title.vars.value }}</a>
                        </li>
                        {% endfor %}
                    </ul>

                    <!-- tabs content -->
                    {% for group in form.groups %}
                    <div id="tabs-{{ loop.index }}">
                        <ul class="connectedSortable">
                            {{ form_row(group.id) }}
                            {{ form_row(group.code) }}
                            {{ form_row(group.title) }}
                            {% for attribute in group.attributes %}
                                <li class="ui-state-default ui-corner-all" id="{{ attribute.id.vars.value }}">
                                    {{ attribute.title.vars.value }} ({{ attribute.code.vars.value }})
                                    {{ form_row(attribute.id) }}
                                </li>
                            {% endfor %}
                        </ul>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>

        <!-- available attributes -->
        <div class="form-panel ui-corner-all type-available-fields">
            <h2>{% trans %}pim.catalog.set.fieldset.available-attribute{% endtrans %}</h2>
            <ul id="available-list" class="connectedSortable">
                {% for attribute in form.others %}
                    <li class="ui-state-default ui-corner-all" id="{{ attribute.id.vars.value }}">
                        {{ attribute.title.vars.value }} ({{ attribute.code.vars.value }})
                        {{ form_row(attribute.id) }}
                    </li>
                {% endfor %}
            </ul>
        </div>

        {{ form_widget(form._token) }}

        <input id="edit-form-submit" type="submit" value="{% trans %}bap.button.save{% endtrans %}" class="ui-helper-hidden" role="button" aria-disabled="false">

    </form>

    <!-- add group dialog -->
    <div id="dialog" title="{% trans %}pim.catalog.product.text.group-tab{% endtrans %}">
        <form>
            <fieldset class="ui-helper-reset">
                <label for="tab_code">Code</label>
                <input type="text" name="tab_code" id="tab_code" value="" class="ui-widget-content ui-required ui-corner-all" />
            </fieldset>
            <fieldset class="ui-helper-reset">
                <label for="tab_title">Title</label>
                <input type="text" name="tab_title" id="tab_title" value="" class="ui-widget-content ui-required ui-corner-all" />
            </fieldset>
        </form>
    </div>

    <div id="dialog-message-delete-group-forbidden" title="{% trans %}pim.catalog.set.message.group-not-delete{% endtrans %}" style="display:none">
        <p>
            <span class="ui-icon ui-icon-circle-check" style="float:left; margin:0 7px 50px 0;"></span>
            This group contains fields, <b>please remove them before</b>.
        </p>
    </div>

{% endblock %}


{% block js_scripts %}
    {{parent()}}
<script>

/* Move an attribute from a group to another */
function moveAttributeToGroup(attrLi) {
    // build new name to place in relevant group
    var attId = attrLi.children('input').attr('value');
    var groupUl = attrLi.parent('ul');
    var indexAtt = groupUl.children('li').length;
    var groupName = groupUl.children('input').attr('name');
    var newName = groupName.replace('[id]', '[attributes]') + '['+indexAtt+']['+attId+']';
    // change name
    attrLi.children('input').attr('name', newName);
}

/* Remove an attribute from a group to available */
function removeAttributeFromGroup(attrLi) {
    // change name to others attributes to remove
    var attId = attrLi.children('input').attr('value');
    var newName = 'pim_catalogbundle_productattributeset[others][attribute_'+attId+'][id]';
    attrLi.children('input').attr('name', newName);
}

/* Aims to bind new lists (groups) together to allow to move attribute to one to other */
function resetListMoves() {
    /* set groups and fields */
    $( ".connectedSortable" ).sortable().disableSelection();
    var groupTabs = $( "#tabs" ).tabs();
    var tabItems = $( "ul:first li", groupTabs ).droppable({
        accept: ".connectedSortable li",
        hoverClass: "ui-state-hover",
        drop: function( event, ui ) {

            var item = $(this);
            var list = $(item.find("a").attr("href")).find( ".connectedSortable" );
            ui.draggable.hide( "slow", function() {
                groupTabs.tabs("select", tabItems.index(item));
                $(this).appendTo(list).show("slow");
                // move to other group
                moveAttributeToGroup(ui.draggable);
            });
        }
    });

    /* add an attribute from available to a group */
    $( ".connectedSortable" ).sortable({
        connectWith: "#available-list",
        placeholder: "ui-state-highlight",
        cursor: "move",
        receive: function(event, ui) {
            /* TODO : notice that drop is called when drag from available and drop in other group than the current displayed */
            ui.item.addClass("add-field").removeClass("remove-field");
            moveAttributeToGroup(ui.item);
        }
    }).disableSelection();

    /* remove an attribute from group */
    $( "#available-list" ).sortable({
        connectWith: ".connectedSortable",
        placeholder: "ui-state-highlight",
        cursor: "move",
        receive: function(event, ui) {
            ui.item.addClass("remove-field").removeClass("add-field");
            removeAttributeFromGroup(ui.item);
        }
    }).disableSelection();
}

$(function() {

    resetListMoves();

    /* add a group */
    var tabCodeInput = $("#tab_code");
    var tabTitleInput = $("#tab_title");
    var tabCounter = $("#tabs ul").children('li.tab').length + 1;

    // tabs init with a custom tab template and an "add" callback filling in the content
    var groupTabs = $( "#tabs").tabs({
        tabTemplate: "<li><span class='ui-icon ui-icon-close'>{% trans %}pim.catalog.set.text.delete-group{% endtrans %}</span><a href='#{href}'>#{label}</a></li>",
        add: function( event, ui ) {
            var tabContent =
                '<ul class="connectedSortable">'+
                    '<input type="hidden" name="pim_catalogbundle_productattributeset[groups]['+tabCounter+'][id]" value="">'+
                    '<input type="hidden" name="pim_catalogbundle_productattributeset[groups]['+tabCounter+'][code]" value="'+tabCodeInput.val()+'" />'+
                    '<input type="hidden" name="pim_catalogbundle_productattributeset[groups]['+tabCounter+'][title]" value="'+tabTitleInput.val()+'" />'+
                '</ul>';
            $( ui.panel ).append(tabContent);
            /* aims to drag / drop from and to this new tab */
            resetListMoves();
        }
    });

    /* vertical tabs */
    $( "#tabs" ).tabs().addClass( "ui-tabs-vertical ui-helper-clearfix" );
    $( "#tabs li" ).removeClass( "ui-corner-top" ).addClass( "ui-corner-left" );

    /* allow to sort tabs */
    $( "#tabs" ).tabs().find( ".ui-tabs-nav" ).sortable({ axis: "y", cancel: ":input, button, a.not-sortable" });

    // modal dialog init: custom buttons and a "close" callback reseting the form inside
    var $dialog = $( "#dialog" ).dialog({
        autoOpen: false,
        modal: true,
        buttons: {
            Add: function() {
                addTab();
                $( this ).dialog( "close" );
            },
            Cancel: function() {
                $( this ).dialog( "close" );
            }
        },
        open: function() {
            tabTitleInput.focus();
        },
        close: function() {
            $form[ 0 ].reset();
        }
    });

    // addTab form: calls addTab function on submit and closes the dialog
    var $form = $( "form", $dialog ).submit(function() {
        addTab();
        $dialog.dialog( "close" );
        return false;
    });

    // actual addTab function: adds new tab using the title input from the form above
    function addTab() {
        var tabTitle = tabTitleInput.val() || "Tab " + tabCounter;
        groupTabs.tabs( "add", "#tabs-" + tabCounter, tabTitle );
        tabCounter++;
    }

    // addTab button: just opens the dialog
    $( "#add_tab" )
        /*.button()*/
        .click(function() {
            $dialog.dialog( "open" );
        });

    // close icon: removing the tab on click
    $( "#tabs span.ui-icon-close" ).live( "click", function() {
        // get panel to remove
        var panelId = $(this).closest("li").remove().attr("aria-controls");
        var panel = $("#"+panelId );
        // remove all attributes
        panel.children('ul.connectedSortable').children('li').each(function() {
            var liAttr = $(this);
            removeAttributeFromGroup(liAttr);
            liAttr.appendTo("#available-list");
        });
        // remove panel
        panel.remove();
        // to avoid collision (if i add, i remove, i re-add tab)
    });

});
</script>
{% endblock %}
