{% extends 'PimUIBundle::layout.html.twig' %}

{% block title %}Akeneo - List of categories {% endblock %}

{% block content %}
    {{ parent() }}
<h2>PHP &amp; mySQL demo + event order</h2>
<div id="description">
<p>Here is a PHP &amp; mySQL enabled demo. You can use the classes/DB structure included, but those are not thoroughly tested and not officially a part of jstree. In the log window you can also see all function calls as they happen on the instance.</p>
<div id="mmenu" style="height:30px; overflow:auto;">
    <input type="button" id="add_folder" value="add folder" style="display:block; float:left;"/>
    <input type="button" id="rename" value="rename" style="display:block; float:left;"/>
    <input type="button" id="remove" value="remove" style="display:block; float:left;"/>
    <input type="button" id="cut" value="cut" style="display:block; float:left;"/>
    <input type="button" id="copy" value="copy" style="display:block; float:left;"/>
    <input type="button" id="paste" value="paste" style="display:block; float:left;"/>
    <input type="button" id="clear_search" value="clear" style="display:block; float:right;"/>
    <input type="button" id="search" value="search" style="display:block; float:right;"/>
    <input type="text" id="text" value="" style="display:block; float:right;" />
    <input type="button" style='width:170px; height:24px; margin:5px auto;' value="refresh" onclick="$('#demo').jstree('refresh',-1);" />
</div>

<!-- the tree container (notice NOT an UL node) -->
<div id="demo" class="demo"></div>

{% endblock %}

{% block js_libs %}
    {{ parent() }}
    <script type="text/javascript" src="/bundles/bapui/js/tree/jquery.cookie.js"></script>
    <script type="text/javascript" src="/bundles/bapui/js/tree/jquery.hotkeys.js"></script>
    <script type="text/javascript" src="/bundles/bapui/js/tree/jquery.jstree.js"></script>
{% endblock %}

{% block js_scripts %}
<!-- JavaScript neccessary for the tree -->
<script type="text/javascript" class="source below">
$(function () {

$("#demo")
    .jstree({ 
        // List of active plugins
        "plugins" : [ 
            "themes","json_data","ui","crrm","cookies","dnd","search","types","hotkeys","contextmenu" 
        ],

        // I usually configure the plugin that handles the data first
        // This example uses JSON as it is most common
        "json_data" : { 
            // This tree is ajax enabled - as this is most common, and maybe a bit more complex
            // All the options are almost the same as jQuery's AJAX (read the docs)
            "ajax" : {
                // the URL to fetch the data
                "url" : "children",
                // the `data` function is executed in the instance's scope
                // the parameter is the node being loaded 
                // (may be -1, 0, or undefined when loading the root nodes)
                "data" : function (n) {
                    // the result is fed to the AJAX request `data` option
                    return {
                        "id" : n.attr ? n.attr("id").replace("node_","") : null 
                    }; 
                }
            }
        },
        // Configuring the search plugin
        "search" : {
            // As this has been a common question - async search
            // Same as above - the `ajax` config option is actually jQuery's AJAX object
            "ajax" : {
                "url" : "search",
                // You get the search string as a parameter
                "data" : function (str) {
                    return {
                        "search_str" : str 
                    }; 
                }
            }
        },
        // Using types - most of the time this is an overkill
        // read the docs carefully to decide whether you need types
        "types" : {
            // I set both options to -2, as I do not need depth and children count checking
            // Those two checks may slow jstree a lot, so use only when needed
            "max_depth" : -2,
            "max_children" : -2,
            // I want only `drive` nodes to be root nodes 
            // This will prevent moving or creating any other type as a root node
            "valid_children" : [ "folder" ],
            "types" : {
                // The `folder` type
                "folder" : {
                    "icon" : {
                        "image" : "/bundles/pimui/images/icons/tree/folder.png"
                    }
                }
            }
        }
    })
    .bind("create.jstree", function (e, data) {
        $.post(
            "createNode", 
            {  
                "id" : data.rslt.parent.attr("id").replace("node_",""), 
                "position" : data.rslt.position,
                "title" : data.rslt.name,
                "type" : data.rslt.obj.attr("rel")
            }, 
            function (r) {
                if(r.status) {
                    $(data.rslt.obj).attr("id", "node_" + r.id);
                }
                else {
                    $.jstree.rollback(data.rlbk);
                }
            }
        );
    })
    .bind("remove.jstree", function (e, data) {
        data.rslt.obj.each(function () {
            $.ajax({
                async : false,
                type: 'POST',
                url: "removeNode",
                data : { 
                    "id" : this.id.replace("node_","")
                }, 
                success : function (r) {
                    if(!r.status) {
                        data.inst.refresh();
                    }
                }
            });
        });
    })
    .bind("rename.jstree", function (e, data) {
        $.post(
            "renameNode", 
            {  
                "id" : data.rslt.obj.attr("id").replace("node_",""),
                "title" : data.rslt.new_name
            }, 
            function (r) {
                if(!r.status) {
                    $.jstree.rollback(data.rlbk);
                }
            }
        );
    })
    .bind("move_node.jstree", function (e, data) {
        data.rslt.o.each(function (i) {
            $.ajax({
                async : false,
                type: 'POST',
                url: "moveNode",
                data : { 
                    "id" : $(this).attr("id").replace("node_",""), 
                    "ref" : data.rslt.cr === -1 ? 1 : data.rslt.np.attr("id").replace("node_",""), 
                    "position" : data.rslt.cp + i,
                    "title" : data.rslt.name,
                    "copy" : data.rslt.cy ? 1 : 0
                },
                success : function (r) {
                    if(!r.status) {
                        $.jstree.rollback(data.rlbk);
                    }
                    else {
                        $(data.rslt.oc).attr("id", "node_" + r.id);
                        if(data.rslt.cy && $(data.rslt.oc).children("UL").length) {
                            data.inst.refresh(data.inst._get_parent(data.rslt.oc));
                        }
                    }
                }
            });
        });
    });

});
</script>
<script type="text/javascript" class="source below">
// Code for the menu buttons
$(function () { 
    $("#mmenu input").click(function () {
        switch(this.id) {
            case "add_folder":
                $("#demo").jstree("create", null, "last", { "attr" : { "rel" : this.id.toString().replace("add_", "") } });
                break;
            case "search":
                $("#demo").jstree("search", document.getElementById("text").value);
                break;
            case "text": break;
            default:
                $("#demo").jstree(this.id);
                break;
        }
    });
});
</script>
{% endblock %}